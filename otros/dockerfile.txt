FROM ubuntu:22.04
 
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC
 
# Agregar el repositorio de PHP de Ondrej para versiones antiguas
RUN apt update && apt install -y tzdata && \
    ln -fs /usr/share/zoneinfo/${TZ} /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata && \
    apt install -y software-properties-common && \
    add-apt-repository ppa:ondrej/php && \
    apt update && \
    apt install -y \
    php8.1 \
    php8.1-xml \
    php8.1-pdo \
    php8.1-dev \
    php8.1-soap \
    php8.1-mbstring \
    php8.1-curl \
    php8.1-sqlite3\
    php8.1-zip \
    libcurl4-openssl-dev \
    apache2 \
    libapache2-mod-php8.1 \
    unixodbc \
    unixodbc-dev \
    libicu-dev \
    iputils-ping \
    unzip \
    git

    

# Configurar PHP 8.1 como la versión predeterminada
RUN update-alternatives --set php /usr/bin/php8.1
 
# Install composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
 
#instalar node js
RUN apt install -y nodejs npm
 
# Instalar php-pear ahora que PHP 8.1 es la versión predeterminada
RUN apt install -y php-pear && \
    pear config-set php_ini /etc/php/8.1/apache2/php.ini
 
# Instalar Xdebug a través de PECL
 
ENV LD_LIBRARY_PATH=/usr/local/lib:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
 
# Instalar extensiones SQL Server
RUN pecl config-set php_ini /etc/php/8.1/apache2/php.ini && \
    pecl install sqlsrv && \
    pecl install pdo_sqlsrv
 
# Habilitar las extensiones de SQL Server y los módulos de Apache
RUN printf "; priority=20\nextension=sqlsrv.so\n" > /etc/php/8.1/mods-available/sqlsrv.ini && \
    printf "; priority=30\nextension=pdo_sqlsrv.so\n" > /etc/php/8.1/mods-available/pdo_sqlsrv.ini && \
    phpdismod sqlsrv pdo_sqlsrv && \
    phpenmod sqlsrv pdo_sqlsrv && \
    sed -i '/extension="pdo_sqlsrv.so"/d' /etc/php/8.1/apache2/php.ini && \
    sed -i '/extension="sqlsrv.so"/d' /etc/php/8.1/apache2/php.ini && \
    a2dismod mpm_event && \
    a2enmod mpm_prefork && \
    a2enmod php8.1 && \
    a2enmod rewrite
 
# Directorio donde se va a almacenar el SDK de SAP
RUN mkdir -p /usr/sap
 
# Copiando recursos necesarios para compilar la extensión de SAP para PHP
COPY ./.docker/utils/php-sap-extension/sdk-nwrfcsdk.zip /usr/sap/sdk-nwrfcsdk.zip
RUN unzip /usr/sap/sdk-nwrfcsdk.zip -d /usr/sap/ && \
    rm /usr/sap/sdk-nwrfcsdk.zip
 
# Directorio de trabajo para compilar la extensión de SAP para PHP
WORKDIR /app-ext
 
# Copiar el compilador de la extensión de SAP para PHP
COPY ./.docker/utils/php-sap-extension/compilador .
# Compilar la extensión de SAP para PHP
RUN phpize && ./configure --with-sapnwrfc=/usr/sap/nwrfcsdk && make && make install
 
# Activar la extensión de SAP para PHP
RUN printf "; priority=40\nextension=sapnwrfc.so\n" > /etc/php/8.1/mods-available/sapnwrfc.ini && \
    phpenmod sapnwrfc
 
# Activar Microsoft ODBC Driver para SQL Server
# Agregar la clave de Microsoft e instalar repositorio de SQL Server ODBC
RUN curl https://packages.microsoft.com/keys/microsoft.asc | tee /etc/apt/trusted.gpg.d/microsoft.asc && \
    curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | tee /etc/apt/sources.list.d/mssql-release.list && \
    apt-get update && \
    ACCEPT_EULA=Y apt-get install -y msodbcsql17 && \
    ACCEPT_EULA=Y apt-get install -y mssql-tools && \
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc && \
    . ~/.bashrc
 
# Descargar y compilar ICU 50 desde el código fuente
WORKDIR /tmp
# ADD https://github.com/unicode-org/icu/releases/download/release-50-2/icu4c-50_2-src.tgz .
RUN apt-get install -y wget && wget https://github.com/unicode-org/icu/releases/download/release-50-2/icu4c-50_2-src.tgz && \
    tar -xzf icu4c-50_2-src.tgz && \
    cd icu/source && \
    ./configure --prefix=/usr/local && \
    make && make install && \
    rm -rf /tmp/*
 
# Copiar configuración de Apache, si tienes una configuración personalizada
COPY ./.docker/apache.conf /etc/apache2/sites-available/000-default.conf
 
# Eliminar listas de apt para reducir el tamaño de la imagen
RUN rm -rf /var/lib/apt/lists/*
 
# Establecer el directorio de trabajo
WORKDIR /var/www/html
 
RUN chown -R www-data:www-data /var/www/html && chmod -R 755 /var/www/html
# Crear un archivo phpinfo.php para prueba
# RUN echo "<?php phpinfo(); ?>" > ./phpinfo.php
 
# Exponer el puerto 80
EXPOSE 80
 
# Iniciar Apache en primer plano
# CMD ["php", "artisan", "serve"]
CMD ["apache2ctl", "-D", "FOREGROUND"]